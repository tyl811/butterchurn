{"version":2,"baseVals":{"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":2.103,"wave_smoothing":0.54,"wave_mystery":0.38,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":64,"thickoutline":1,"textured":1,"rad":0.53526,"tex_zoom":1.35028,"g":1,"b":1,"a":0.4,"r2":1,"b2":1,"a2":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":14,"num_inst":78,"x":0.6,"rad":0.02217,"tex_zoom":60.80383,"g":1,"b":1,"a":0.9,"g2":0,"a2":1,"border_g":0.59,"border_a":1},"init_eqs_str":"a['fov'] = 0; a['arg'] = 0; a['t1'] = 0; a['posx'] = 0; a['trel'] = 0; a['yl'] = 0; a['k1'] = 0; a['posy'] = 0; a['xl'] = 0; a['time2'] = 0; a['q19'] = 0; a['t2'] = 0; a['yw'] = 0; a['dist'] = 0; a['xw'] = 0; a['speed'] = 0; a['t1']=div(rand(10),10); a['t2']=(0.2+div(rand(8),10));","frame_eqs_str":"a['speed']=0.02; a['trel']=((Math.floor((a['time']*a['speed']))-(a['time']*a['speed']))+1); a['k1']=div(a['instance'],a['num_inst']); a['k1']=(a['k1']-Math.floor(a['k1'])); a['dist']=(1.4-a['k1']); a['fov']=0.1; a['arg']=(a['dist']-(0.02*a['time'])); a['posx']=(div(a['fov'],a['dist'])*(Math.sin((a['arg']*13))+(0.2*Math.sin((a['dist']*332))))); a['posy']=(div(a['fov'],a['dist'])*(Math.cos((a['arg']*36))+(0.2*Math.sin((a['dist']*332))))); a['xl']=(0.5+a['posx']); a['yl']=(0.5+a['posy']); a['time2']=(div(a['time'],4)+Math.cos(a['instance'])); a['xw']=(0.5+(0.5*(Math.sin((a['arg']*14))+(0.02*Math.cos((a['arg']*1131)))))); a['yw']=(a['time2']-Math.floor(a['time2'])); a['x']=((Math.abs(bnot(a['q19']))>0.00001)?(a['xl']):(a['xw'])); a['y']=((Math.abs(bnot(a['q19']))>0.00001)?(a['yl']):(a['yw'])); a['ang']=((a['time']*Math.sin((a['k1']*44)))*12); a['a']=a['t1']; a['border_a']=0; a['a2']=a['t2']; a['rad']=div(0.01,a['dist']); a['r']=(0.5+(0.3*Math.sin((a['instance']+a['arg'])))); a['b']=(0.5+(0.3*Math.sin(((a['instance']-2)+a['arg'])))); a['g']=(0.5+(0.3*Math.sin(((a['instance']*2)+a['arg']))));","init_eqs_eel":"t1 = rand(10)/10;\nt2 = .2 + rand(8)/10;","frame_eqs_eel":"speed = .02;\ntrel = int(time*speed)- time*speed+1;\nk1 = instance/num_inst; \nk1 = k1 - int(k1);\ndist = 1.4-k1; //################# soll 1 sein\n//dist = dist - int(dist);\n\n\nfov = .1;\narg = dist-.02*time;\nposx = fov/dist * (sin(arg*13) + .2*sin(dist*332));\nposy = fov/dist * (cos(arg*36)+ .2*sin(dist*332));\n\nxl = .5 + posx;\nyl = .5 + posy;\n\ntime2 = time/4 + cos(instance) ;\nxw = .5 + .5 * (sin(arg*14) + .02*cos(arg*1131)) ;\nyw = time2 - int(time2);\n\nx = if(bnot(q19),xl,xw);\ny = if(bnot(q19),yl,yw);\n\nang = time * sin(k1*44)*12;\na = t1; border_a = 0; a2 = t2;\nrad = .01/dist;\n\nr = .5 + .3* sin(instance+arg); \nb = .5 + .3* sin(instance-2+arg); \ng = .5 + .3* sin(instance*2+arg);\n\n"},{"baseVals":{"sides":63,"x":0.503,"y":0.67,"rad":0.05033,"tex_zoom":0.49981,"r":0,"g":1,"b":1,"g2":0,"a2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"y":0.51,"rad":0.19869,"tex_ang":1.00531,"tex_zoom":0.49981,"g":0.4,"a":0.7,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":128,"thick":1,"additive":1,"scaling":0.89152,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":100,"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a['rand1'] = 0; a['index2'] = 0; a['index'] = 0; a['q12'] = 0; a['rand2'] = 0; a['t1'] = 0; a['q22'] = 0; a['q21'] = 0; a['q15'] = 0; a['q6'] = 0; a['q1'] = 0; a['dec_med'] = 0; a['q5'] = 0; a['ps'] = 0; a['movx'] = 0; a['rott'] = 0; a['is_beat'] = 0; a['q23'] = 0; a['k1'] = 0; a['q24'] = 0; a['dec_slow'] = 0; a['q11'] = 0; a['q10'] = 0; a['dirx'] = 0; a['q4'] = 0; a['q16'] = 0; a['movy'] = 0; a['q26'] = 0; a['p2'] = 0; a['avg'] = 0; a['q19'] = 0; a['beat'] = 0; a['q17'] = 0; a['p1'] = 0; a['peak'] = 0; a['trig1'] = 0; a['q2'] = 0; a['q27'] = 0; a['p3'] = 0; a['q3'] = 0; a['t0'] = 0; a['movp'] = 0; a['q28'] = 0; a['radi'] = 0; a['q20'] = 0; a['q8'] = 0; a['index']=rand(100); a['index2']=rand(100); a['rand1']=rand(12); a['rand2']=rand(3); a['p1']=rand(10); a['p2']=a['p1']; a['p3']=a['p2']; a['movy']=div(rand(100),23);","frame_eqs_str":"a['dec_med']=pow(0.95, div(30,a['fps'])); a['dec_slow']=pow(0.98, div(30,a['fps'])); a['beat']=Math.max(Math.max(a['bass'], a['mid']), a['treb']); a['avg']=((a['avg']*a['dec_slow'])+(a['beat']*(1-a['dec_slow']))); a['is_beat']=(above(a['beat'], ((0.2+a['avg'])+a['peak']))*above(a['time'], (a['t0']+0.2))); a['t0']=((a['is_beat']*a['time'])+((1-a['is_beat'])*a['t0'])); a['peak']=((a['is_beat']*a['beat'])+(((1-a['is_beat'])*a['peak'])*a['dec_med'])); a['index']=mod((a['index']+a['is_beat']),64); a['index2']=mod((a['index2']+(a['is_beat']*bnot(a['index']))),3); a['q20']=a['avg']; a['q21']=a['beat']; a['q22']=a['peak']; a['ps']=((a['dec_slow']*a['ps'])+((1-a['dec_slow'])*a['q22'])); a['q23']=a['ps']; a['q24']=a['is_beat']; a['q26']=((a['bass_att']+a['mid_att'])+a['treb_att']); a['q27']=(a['index']+1); a['q28']=a['index2']; a['k1']=(a['is_beat']*bnot(mod(a['index'],20))); a['p1']=((a['k1']*(a['p1']+1))+((1-a['k1'])*a['p1'])); a['p2']=((a['dec_med']*a['p2'])+((1-a['dec_med'])*a['p1'])); a['p3']=((a['dec_med']*a['p3'])+((1-a['dec_med'])*a['p2'])); a['rott']=div((a['p3']*3.1416),4); a['q1']=Math.cos(a['rott']); a['q2']=Math.sin(a['rott']); a['q3']=-a['q2']; a['q4']=a['q1']; a['dirx']=((a['dirx']*a['dec_med'])+((1-a['dec_med'])*a['index2'])); a['movx']=(a['movx']+div((0.02*a['dirx']),a['fps'])); a['movy']=(a['movy']+div((0.04*a['q1']),a['fps'])); a['q15']=a['movx']; a['q16']=a['movy']; a['movp']=(a['movp']+div((0.02*a['q23']),a['fps'])); a['q17']=a['movp']; a['trig1']=((a['q24']*bnot(mod(a['index'],4)))*above(a['t1'], 1.9)); a['t1']=((Math.abs(a['trig1'])>0.00001)?(0):((a['t1']+div(0.3,a['fps'])))); a['t1']=Math.min(a['t1'], 2); a['radi']=0.7; a['q10']=(((-1+a['t1'])*a['radi'])*1.5); a['q11']=(((1-(2*sqr((a['t1']-1))))*a['radi'])-0.4); a['q12']=0; a['q5']=(0.03+(0.1*(1+Math.sin((div(a['time'],27)+a['rand1']))))); a['q6']=(2+Math.sin((div(a['time'],27)+(a['rand2']*2.5)))); a['q8']=Math.sin(div(a['time'],16)); a['q19']=(a['rand2']*0.002); a['monitor']=a['index'];","pixel_eqs_str":"","init_eqs_eel":"index = rand(100);\nindex2 = rand(100);\nrand1 = rand(12);\nrand2 = rand(3);\np1 = rand(10);\np2 = p1;\np3 = p2;\nmovy = rand(100)/23;","frame_eqs_eel":"dec_med = pow (0.95, 30/fps);\ndec_slow = pow (0.98, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %64;\nindex2 = (index2 + is_beat*bnot(index))%3;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\n\nps = dec_slow*ps + (1-dec_slow)*q22;\nq23 = ps;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nq27 = index +1;\nq28 = index2;\n\nk1 =  is_beat*bnot(index%20);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\np3 = dec_med * p3+ (1-dec_med)*p2;\nrott = p3 * 3.1416/4;\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ndirx = dirx*dec_med + (1-dec_med)*(index2);\n\nmovx = movx + .02*dirx/fps;\nmovy = movy + .04*q1/fps;\nq15= movx;\nq16 = movy;\n\nmovp = movp +.02*q23/fps;\nq17 = movp;\n\ntrig1 = q24* bnot(index%4) * above(t1,1.9);\nt1 = if(trig1,0,t1+.3/fps);\nt1 = min(t1,2);\n\nradi = .7;\nq10 = (-1 + t1)*radi*1.5;\nq11 = (1 - 2*sqr(t1-1))*radi-.4;\nq12 = 0;\n\nq5 = .03 + .1*(1+sin(time/27+rand1)); //dia\nq6 = 2 + sin(time/27+rand2*2.5);\nq8 = sin(time/16);\nq19 = rand2*.002;\n\nmonitor = index;","pixel_eqs_eel":"","warp":"float iter6;\nfloat xlat_mutablerill;\n shader_body { \n  iter6 = float((rand_preset.z > 0.5));\n  float k2_1;\n  float k1_3;\n  float ky_4;\n  vec2 uv3_5;\n  uv3_5 = ((43.0 + (18.0 * iter6)) * (uv - vec2(0.5, 0.5)));\n  ky_4 = clamp ((0.04 - (uv3_5.y / 40.0)), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = (uv3_5.x * 0.8);\n  k1_3 = (tmpvar_6 - (sign(tmpvar_6) * 14.0));\n  k1_3 = (k1_3 - (sign(k1_3) * 11.0));\n  k1_3 = (k1_3 - (sign(k1_3) * (2.0 + \n    (rand_preset.y * 8.0)\n  )));\n  for (int n_2 = 1; float(n_2) <= (4.0 + (2.0 * iter6)); n_2++) {\n    k1_3 = (k1_3 + ((\n      (float((-16 * n_2)) * sign(k1_3))\n     * ky_4) * ky_4));\n    ky_4 = clamp ((ky_4 - 0.1), 0.0, 1.0);\n  };\n  k2_1 = k1_3;\n  float tmpvar_7;\n  tmpvar_7 = clamp (k1_3, -1.6, 1.6);\n  k1_3 = tmpvar_7;\n  float tmpvar_8;\n  tmpvar_8 = clamp ((cos(tmpvar_7) - 0.1), 0.0, 1.0);\n  xlat_mutablerill = (((rand_preset - 0.3) * clamp (\n    cos((8.0 * k2_1))\n  , 0.0, 1.0)).xyz * vec3(tmpvar_8)).x;\n  vec2 tmpvar_9;\n  tmpvar_9.x = -(q15);\n  tmpvar_9.y = q16;\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ((max (\n    (vec3(tmpvar_8) / 2.0)\n  , \n    (texture (sampler_main, (((uv - 0.5) * 2.0) + tmpvar_9)).xyz * 0.66)\n  ) - (0.2 * xlat_mutablerill)) - 0.01);\n  ret = tmpvar_10.xyz;\n }","comp":"float cstretch;\nvec2 xlat_mutabledz;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.y = 0.0;\n  tmpvar_1.x = texsize.z;\n  vec2 tmpvar_2;\n  tmpvar_2.x = 0.0;\n  tmpvar_2.y = texsize.w;\n  cstretch = (0.7 * sqrt((\n    (2.0 * rand_preset.x)\n   - 1.0)));\n  vec3 mus_3;\n  vec2 uv1_4;\n  vec3 ret_5;\n  vec2 tmpvar_6;\n  tmpvar_6.x = (uv.x + (time * 0.06));\n  tmpvar_6.y = ((uv.y / 4.0) + (time * 0.02));\n  uv1_4 = ((uv - 0.5) + (texture (sampler_noise_lq, tmpvar_6).x * q19));\n  uv1_4.x = (uv1_4.x * (1.0/((\n    ((uv1_4.y * (rand_preset.x - 0.5)) * 2.0)\n   + 1.0))));\n  vec2 tmpvar_7;\n  float tmpvar_8;\n  tmpvar_8 = (q15 * 2.0);\n  tmpvar_7.x = tmpvar_8;\n  tmpvar_7.y = (-2.0 * q16);\n  vec2 tmpvar_9;\n  tmpvar_9 = fract(((\n    (2.0 * uv1_4)\n   + 0.5) + tmpvar_7));\n  xlat_mutabledz.x = ((2.0 * dot (texture (sampler_main, \n    (tmpvar_9 + tmpvar_1)\n  ).xyz, vec3(0.32, 0.49, 0.29))) - (2.0 * dot (texture (sampler_main, \n    (tmpvar_9 - tmpvar_1)\n  ).xyz, vec3(0.32, 0.49, 0.29))));\n  xlat_mutabledz.y = ((2.0 * dot (texture (sampler_main, \n    (tmpvar_9 + tmpvar_2)\n  ).xyz, vec3(0.32, 0.49, 0.29))) - (2.0 * dot (texture (sampler_main, \n    (tmpvar_9 - tmpvar_2)\n  ).xyz, vec3(0.32, 0.49, 0.29))));\n  vec4 tmpvar_10;\n  tmpvar_10 = texture (sampler_main, tmpvar_9);\n  xlat_mutabledz = (xlat_mutabledz * 1.5);\n  vec2 tmpvar_11;\n  tmpvar_11.x = sin(tmpvar_8);\n  tmpvar_11.y = sin((q16 * 2.0));\n  vec2 tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * 0.6);\n  vec2 tmpvar_13;\n  tmpvar_13 = ((uv1_4 - tmpvar_12) + (xlat_mutabledz * (1.0 - cstretch)));\n  vec2 tmpvar_14;\n  tmpvar_14 = ((uv1_4 - tmpvar_12) + xlat_mutabledz);\n  vec2 tmpvar_15;\n  tmpvar_15 = ((uv1_4 - tmpvar_12) + (xlat_mutabledz * (1.0 + cstretch)));\n  vec3 tmpvar_16;\n  tmpvar_16.x = (q5 / sqrt(dot (tmpvar_13, tmpvar_13)));\n  tmpvar_16.y = (q5 / sqrt(dot (tmpvar_14, tmpvar_14)));\n  tmpvar_16.z = (q5 / sqrt(dot (tmpvar_15, tmpvar_15)));\n  mus_3 = (tmpvar_16 + 0.04);\n  mus_3 = (mus_3 * (0.75 + mus_3));\n  ret_5 = (clamp (mus_3, 0.0, 1.0) * clamp ((1.0 - \n    (q6 * dot (tmpvar_10.xyz, vec3(0.32, 0.49, 0.29)))\n  ), 0.0, 1.0));\n  vec3 tmpvar_17;\n  tmpvar_17 = (clamp ((1.0 - \n    (2.0 * sqrt(mus_3))\n  ), 0.0, 1.0) * tmpvar_10.xyz);\n  ret_5 = (ret_5 + ((\n    ((tmpvar_17 * tmpvar_17) / q5)\n   / 2.0) * q8));\n  vec4 tmpvar_18;\n  tmpvar_18.w = 1.0;\n  tmpvar_18.xyz = ret_5;\n  ret = tmpvar_18.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat3 ret1, stone, window;\nfloat2 rsk, uv1, uv2, uv3, uv4, dz1, Kugel1;\nfloat mask1, rad1, rill;\nstatic float iter6 = (rand_preset.z > .5);\nshader_body {\n\nfloat dx = abs(.5-frac(uv.x*88))*0;\nfloat dy = abs(.5-frac(uv.y*88))*1;\nuv += float2(dx,dy)*.0;\n\nuv1 = float2(uv.x-.5,uv.y-0.5);\n\nfloat2 uv3 = uv1;float dist = 43+18*iter6;\nuv3 = dist * uv1;\n\nfloat ky = saturate(.04-uv3.y/40);\nfloat k1 = uv3.x*.8 ;;\n\nk1 = k1 - sign (k1)*14; //Verdoppelung\nk1 = k1 - sign (k1)*11; //Verdoppelung\nk1 = k1 - sign (k1)*(2+rand_preset.y*8); //Verdoppelung\n\nint n = 1 ;\nfloat delta = .1;\nwhile (n <= 4+2*iter6) \n{\n  k1 += (-16*n*sign(k1))*ky*ky;\n  ky = saturate (ky - delta);\n  delta *= 1;\n  n++; \n}\nfloat k2 = k1;\nk1 = clamp(k1,-1.6,1.6);\nstone = saturate(cos(k1) -.1);\n\nrill = (rand_preset-.3)*saturate(cos(8*k2))*stone;\n\nret = max(stone/2, GetPixel((uv-.5)*2\n+float2(-q15,q16))*(.66)) -.2*rill - 0.01;\n}","comp_hlsl":"float2 rs, rs0, uv2, uv3,uv4,dz;\nfloat3 noise, ret1, neu;\nstatic float2 hor = float2 (texsize.z,0);\nstatic float2 ver = float2 (0, texsize.w);\nstatic float dia = q18;\nstatic float cstretch = .7*sqrt(2*rand_preset.x-1);\n\nshader_body {\n\nfloat noise = tex2D (sampler_noise_lq,float2(uv.x+time*.06,uv.y/4+time*.02));\n\nfloat2 uv1 = (uv-.5 );//*aspect.xy;\nuv1 += noise*q19;\nfloat z = .1/uv1.y/uv1.x;\n\nfloat dist = 1;\nfloat inten = 1;\nret1 = 0;\n\ndz = 0; neu = 0;\n    uv1.x *= 1/(uv1.y*(rand_preset.x-.5)*2+1);\n    uv3 = frac(2*uv1 +.5 + float2(q15*2 ,-2*q16));\n\n    dz.x = inten*(2*lum(GetPixel(uv3+hor))- 2*lum(GetPixel(uv3-hor)));\n    dz.y = inten*(2*lum(GetPixel(uv3+ver))- 2*lum(GetPixel(uv3-ver)));\n    ret1 = GetPixel(uv3);\n\ndz = dz*1.5;\n\nfloat2 pos = float2 (sin(q15*2), sin(q16*2))*.6;\n\nuv2 = uv1;\nfloat2 uv_rr = (uv2-pos + dz*(1-cstretch));\nfloat2 uv_gg = (uv2-pos + dz);\nfloat2 uv_bb = (uv2-pos + dz*(1+cstretch));\n\ndia = q5;\nfloat3 mus = float3(dia/length(uv_rr),\ndia/length(uv_gg),\ndia/length(uv_bb));\nmus = mus + .04;\nmus *= (.75+mus);\nret = saturate(mus) * saturate (1-q6*lum(ret1)) ;\n\nret += pow(saturate(1-2*sqrt(mus))*ret1,2)/dia/2*q8; //mauer sichtbar\n//ret = GetPixel(uv);\n}"}